head
  title= t('share.by_your_side')
  = display_meta_tags

.container.py-5.page-wrapper
  .row.justify-content-center
    .col-md-12
      .card.shadow-lg
        - if @poll.image.attached?
          = image_tag @poll.image,
            class: "shadow-sm mb-3",
            style: "width: 100%; height: 200px; object-fit: cover; border-radius: 10px 10px 0 0;"

        .card-body
          h3.card-title.mb-4
            span.fw-bold.text-primary= @poll.title

          - if @poll.purpose.present?
            p.mt-1.mb-2 style="font-size: 14px; line-height: 1.4;"
              strong.fw-bold.me-1= t("show.purpose")
              = @poll.purpose

          - if @poll.description.present?
            p.mt-2 style="font-size: 15px; line-height: 1.4;"
              strong.fw-bold.me-1= t("show.description")
              = @poll.description

          - if @options.any?
            - user_voted_option_id = current_user.votes.joins(:option).find_by(options: { poll_id: @poll.id })&.option_id
            ul.list-group.mb-4
              - @options.each do |option|
                - voter_names = option.votes.map { |v| v.user&.full_name || v.user&.user_name }.compact.join(", ")
                li.list-group-item.border-0.mb-3.p-0
                  .d-flex.align-items-center.p-3.shadow-sm.rounded-3 style="background: #f9fafb;"
                    - if option.image.attached?
                      = image_tag option.image, class: "shadow-sm me-3", style: "min-width: 60px; width:60px; height:60px; object-fit:cover; border-radius:12px;"
                    - else 
                      = image_tag 'slide-image_9.jpeg', class: "shadow-sm me-3", style: "min-width: 60px; width:60px; height:60px; object-fit:cover; border-radius:12px;"

                    .flex-grow-1.pe-4
                      span.fw-semibold.d-block.mb-1 style="font-size:16px; color:#111;"= option.text
                      = render 'polls/vote_badge', option: option, voter_names: voter_names

                    - if user_signed_in?
                      - user_vote = option.votes.find_by(user_id: current_user.id)
                      - disabled_other = user_voted_option_id.present? && option.id != user_voted_option_id

                      - if user_vote
                        = render 'votes/unvote_button', poll: @poll, vote: user_vote, option: option, current_action: 'show'
                      - else
                        = render 'votes/vote_button', poll: @poll, option: option, disabled: disabled_other, current_action: 'show'

          = render 'poll_stats', poll: @poll
          
          .mt-5
            .row.justify-content-center.align-items-start.g-4
              .col-md-6.text-center
                h5.fw-bold.mb-3= t("show.stats_by_option")
                = render 'pie_chart_option'
              .col-md-6.text-center
                h5.fw-bold.mb-3= t("show.stats_by_country")
                = render 'pie_chart_country'
                #votesByCountryLegend.text-center.mt-2

          .mt-4
            h5.fw-semibold.mb-3= t("show.comments_by_option")

            - @poll.options.each do |option|
              .card.mb-3
                .card-header.bg-light.fw-bold
                  = option.text
                  small.text-muted.ms-2 = "(#{option.votes.where.not(comment: [nil, '']).count} #{t('share.comment')})"

                .card-body
                  - comments = option.votes.where.not(comment: [nil, ""]).includes(:user, :comment_likes).order(created_at: :desc)
                  - if comments.any?
                    - comments.each do |vote|
                      .mb-3.border-bottom.pb-2 id="comment-#{vote.id}"
                        - if user_signed_in?
                          - liked = vote.comment_likes.exists?(user: current_user)
                        strong= vote.user&.user_name || "User"
                        small.text-muted.ms-2
                          | #{t("show.voted")} #{distance_of_time_in_words_to_now(vote.created_at)} #{t("show.ago")}
                        - if vote.comment.present?
                          p.mb-0.mt-1 style="font-size: 15px !important;" = vote.comment
                          div id="comment-like-wrapper-#{vote.id}"
                            = render 'polls/comment_like_button', vote: vote, liked: liked, poll: @poll
                  - else
                    p.text-muted.mb-0= t("show.no_comment_option")

          .d-flex.justify-content-between.mt-4
            = link_to t("show.back_to_list"), polls_path, class: "btn btn-outline-secondary"
            .d-flex.gap-2
              button.btn.btn-success#sharePollBtn type="button"
                i.bi.bi-share-fill.me-1
                = t("show.share_poll")

              - if user_signed_in? && current_user == @poll.user
                = link_to t("show.edit_poll"), edit_poll_path(@poll), class: "btn btn-warning"
                = link_to t("show.delete_poll"), poll_path(@poll),
                  data: { confirm: t("show.delete_poll_confirm") },
                  method: :delete,
                  class: "btn btn-danger"
              = link_to t("show.new_poll"), new_poll_path, class: "btn btn-primary"
            
script
  | (function() {
  |   function initShareButton() {
  |     const shareBtn = document.getElementById("sharePollBtn");
  |     if (shareBtn) {
  |       shareBtn.addEventListener("click", async () => {
  |         const url = window.location.href;
  |         const title = "#{j @poll.title}";
  |         try {
  |           if (navigator.share) {
  |             await navigator.share({
  |               title: title,
  |               text: "",
  |               url: url
  |             });
  |           } else {
  |             await navigator.clipboard.writeText(url);
  |             alert("");
  |           }
  |         } catch (err) {
  |           console.error("Share failed:", err);
  |         }
  |       });
  |     }
  |   }
  |
  |   function initPollCharts() {
  |     const optionCtx = document.getElementById('votesByOptionChart');
  |     if (optionCtx) {
  |       const dataOption = #{raw @options.map { |o| [o.text, o.votes.count] }.to_h.to_json};
  |       const labelsOption = Object.keys(dataOption);
  |       const valuesOption = Object.values(dataOption);
  |       const totalOption = valuesOption.reduce((a, b) => a + b, 0) || 1;
  |
  |       new Chart(optionCtx, {
  |         type: 'pie',
  |         data: {
  |           labels: labelsOption,
  |           datasets: [{
  |             data: valuesOption,
  |             backgroundColor: [
  |               '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
  |               '#9966FF', '#FF9F40', '#8dd3c7', '#fdb462'
  |             ]
  |           }]
  |         },
  |         options: {
  |           responsive: true,
  |           maintainAspectRatio: false,
  |           plugins: {
  |             legend: { position: 'bottom', labels: { boxWidth: 12, padding: 12 } },
  |             datalabels: {
  |               formatter: (value) => {
  |                 const pct = ((value / totalOption) * 100).toFixed(1);
  |                 return pct + '%';
  |               },
  |               color: '#fff',
  |               font: { weight: 'bold', size: 12 }
  |             },
  |             tooltip: {
  |               callbacks: {
  |                 label: function(ctx) {
  |                   const val = ctx.parsed;
  |                   const pct = ((val / totalOption) * 100).toFixed(1);
  |                   return ctx.label + ': ' + val + ' (' + pct + '%)';
  |                 }
  |               }
  |             }
  |           }
  |         },
  |         plugins: [ChartDataLabels]
  |       });
  |     }
  |
  |     const countryCtx = document.getElementById('votesByCountryChart');
  |     if (countryCtx) {
  |       const dataCountry = #{raw (@votes_by_country || {}).to_json};
  |       const labelsCountry = Object.keys(dataCountry);
  |       const valuesCountry = Object.values(dataCountry);
  |       const totalCountry = valuesCountry.reduce((a, b) => a + b, 0) || 1;
  |
  |       new Chart(countryCtx, {
  |         type: 'pie',
  |         data: {
  |           labels: labelsCountry,
  |           datasets: [{
  |             data: valuesCountry,
  |             backgroundColor: [
  |               '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
  |               '#9966FF', '#FF9F40', '#c9cbcf', '#b0e0e6'
  |             ]
  |           }]
  |         },
  |         options: {
  |           responsive: true,
  |           maintainAspectRatio: false,
  |           plugins: {
  |             legend: { position: 'bottom', labels: { boxWidth: 12, padding: 12 } },
  |             datalabels: {
  |               formatter: (value) => {
  |                 const pct = ((value / totalCountry) * 100).toFixed(1);
  |                 return pct + '%';
  |               },
  |               color: '#fff',
  |               font: { weight: 'bold', size: 12 }
  |             },
  |             tooltip: {
  |               callbacks: {
  |                 label: function(ctx) {
  |                   const val = ctx.parsed;
  |                   const pct = ((val / totalCountry) * 100).toFixed(1);
  |                   return ctx.label + ': ' + val + ' (' + pct + '%)';
  |                 }
  |               }
  |             }
  |           }
  |         },
  |         plugins: [ChartDataLabels]
  |       });
  |     }
  |   }
  |
  |   function initTooltips() {
  |     var tooltipTriggerList = [].slice.call(
  |       document.querySelectorAll('[data-bs-toggle="tooltip"]')
  |     );
  |     tooltipTriggerList.forEach(function (tooltipTriggerEl) {
  |       new bootstrap.Tooltip(tooltipTriggerEl);
  |     });
  |   }
  |
  |   document.addEventListener('turbolinks:load', function() {
  |     initPollCharts();
  |     initTooltips();
  |     initShareButton();
  |   });
  |   document.addEventListener('turbo:load', function() {
  |     initPollCharts();
  |     initTooltips();
  |     initShareButton();
  |   });
  | })();
