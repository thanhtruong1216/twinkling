<% if @poll && @option %>
  <% vote = current_user.votes.find_by(option_id: @option.id) %>

  <% if vote %>
    $("#vote-btn-<%= @option.id %>").html("<%= j render('votes/unvote_button', poll: @poll, option: @option, vote: vote, current_action: @current_request) %>");
  <% else %>
    $("#vote-btn-<%= @option.id %>").html("<%= j render('votes/vote_button', poll: @poll, option: @option, current_action: @current_request) %>");
  <% end %>

  <% options_data = @poll.options.map { |o| { text: o.text, votes: o.votes.size } } %>
  <% new_votes_badge_html = j render('polls/votes_count_badge', poll: @poll) %>

  <% @poll.options.each do |opt| %>
    <% voter_names = opt.votes.map { |v| v.user&.full_name || v.user&.user_name }.compact.join(", ") %>
    <% badge_html = j render('polls/vote_badge', option: opt, voter_names: voter_names) %>
    $('#vote-badge-<%= opt.id %>').replaceWith("<%= badge_html.html_safe %>");
  <% end %>
  $('#vote-counts-<%= @poll.id %>').replaceWith("<%= new_votes_badge_html.html_safe %>");

  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  tooltipTriggerList.forEach(function (el) { new bootstrap.Tooltip(el); });

  (function() {
    const ctx = document.getElementById("pollChart-<%= @poll.id %>");
    if (!ctx) return;

    const existingChart = Chart.getChart(ctx);
    if (existingChart) existingChart.destroy();

    const optionsData = <%= raw options_data.to_json %>;
    const totalVotes = optionsData.reduce((sum, opt) => sum + opt.votes, 0) || 1;
    ctx.height = optionsData.length * 30;

    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: optionsData.map(opt => opt.text),
        datasets: [{
          label: 'Vote %',
          data: optionsData.map(opt => ((opt.votes / totalVotes) * 100).toFixed(0)),
          backgroundColor: ['#9C27B0','#BA68C8','#7E57C2','#64B5F6','#4DD0E1','#F06292'],
          borderWidth: 0,
          barThickness: 20,
          maxBarThickness: 20
        }]
      },
      options: {
        indexAxis: 'y',
        responsive: true,
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: function(context) {
                const voteCount = optionsData[context.dataIndex].votes;
                return `${context.raw}% (${voteCount} vote${voteCount === 1 ? '' : 's'})`;
              }
            }
          }
        },
        scales: {
          x: { beginAtZero: true, max: 100, ticks: { callback: value => value + '%' } },
          y: { ticks: { autoSkip: false } }
        }
      }
    });
  })();

  (function() {
    const ctx = document.getElementById("votesByOptionChart");
    if (!ctx) return;

    const existingChart = Chart.getChart(ctx);
    if (existingChart) existingChart.destroy();

    const optionsData = <%= raw options_data.to_json %>;
    const labels = optionsData.map(opt => opt.text);
    const values = optionsData.map(opt => opt.votes);

    new Chart(ctx, {
      type:'pie',
      data: { labels: labels, datasets:[{ data: values, backgroundColor:['#FF6384','#36A2EB','#FFCE56','#4BC0C0','#9966FF','#FF9F40'] }] },
      options:{ responsive:true, maintainAspectRatio:false, plugins:{ legend:{ position:'bottom' } } }
    });
  })();

  (function() {
    const ctx = document.getElementById("votesByCountryChart");
    if (!ctx) return;

    const existingChart = Chart.getChart(ctx);
    if (existingChart) existingChart.destroy();

    const dataCountry = <%= raw (@votes_by_country || {}).to_json %>;
    const labelsCountry = Object.keys(dataCountry);
    const valuesCountry = Object.values(dataCountry);

    new Chart(ctx, {
      type:'pie',
      data:{ labels: labelsCountry, datasets:[{ data: valuesCountry, backgroundColor:['#FF6384','#36A2EB','#FFCE56','#4BC0C0','#9966FF','#FF9F40'] }] },
      options:{ responsive:true, maintainAspectRatio:false, plugins:{ legend:{ position:'bottom' } } }
    });
  })();
<% end %>
